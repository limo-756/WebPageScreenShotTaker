// PDF Generator using jsPDF library
// This script handles the conversion of HTML paragraphs to PDF format

class PdfGenerator {
    constructor() {
        this.loadJsPDF();
    }

    async loadJsPDF() {
        // For Firefox extension, we'll implement a basic PDF generator
        // In production, you would load jsPDF library
        console.log('PDF Generator initialized');
    }

    async generatePDF(paragraphs, sourceUrl) {
        try {
            console.log('Generating PDF with paragraphs:', paragraphs.length);
            
            // Create PDF content structure
            const pdfData = this.createPDFStructure(paragraphs, sourceUrl);
            
            // Convert to actual PDF bytes using a simplified approach
            return this.convertToPDFBytes(pdfData);
            
        } catch (error) {
            console.error('Error generating PDF:', error);
            throw error;
        }
    }

    createPDFStructure(paragraphs, sourceUrl) {
        const title = this.getPageTitle(sourceUrl);
        const date = new Date().toLocaleDateString();
        
        return {
            title: title,
            source: sourceUrl,
            date: date,
            paragraphs: paragraphs,
            metadata: {
                creator: 'Web Page Tools Extension',
                subject: 'Extracted Blog Content',
                keywords: 'blog, content, extraction'
            }
        };
    }

    async convertToPDFBytes(pdfData) {
        // Simplified PDF generation - creates a text-based format
        // For a real PDF, you would use jsPDF or similar library
        
        const content = this.generateTextContent(pdfData);
        
        // Convert to Uint8Array (simulating PDF bytes)
        const encoder = new TextEncoder();
        return encoder.encode(content);
    }

    generateTextContent(pdfData) {
        let content = '';
        
        // Header
        content += `${pdfData.title}\n`;
        content += '='.repeat(pdfData.title.length) + '\n\n';
        
        // Metadata
        content += `Source: ${pdfData.source}\n`;
        content += `Extracted: ${pdfData.date}\n`;
        content += `Paragraphs: ${pdfData.paragraphs.length}\n\n`;
        
        // Separator
        content += '-'.repeat(80) + '\n\n';
        
        // Content
        pdfData.paragraphs.forEach((paragraph, index) => {
            content += `[${index + 1}] ${paragraph.text}\n\n`;
        });
        
        // Footer
        content += '\n' + '-'.repeat(80) + '\n';
        content += `Generated by Web Page Tools Extension\n`;
        content += `Total paragraphs extracted: ${pdfData.paragraphs.length}\n`;
        content += `Source: ${pdfData.source}`;
        
        return content;
    }

    getPageTitle(url) {
        try {
            const urlObj = new URL(url);
            const hostname = urlObj.hostname.replace('www.', '');
            return `${hostname} - Blog Content`;
        } catch (e) {
            return 'Blog Content Export';
        }
    }

    generateFilename(url) {
        try {
            const urlObj = new URL(url);
            const hostname = urlObj.hostname.replace('www.', '').replace(/\./g, '_');
            const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
            return `${hostname}_blog_content_${timestamp}.pdf`;
        } catch (e) {
            const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
            return `blog_content_${timestamp}.pdf`;
        }
    }

    // Enhanced PDF generation with better formatting
    async generateEnhancedPDF(paragraphs, sourceUrl) {
        // This would be the place to implement actual PDF generation
        // using libraries like jsPDF, PDFKit, or similar
        
        const htmlContent = this.generateHTML(paragraphs, sourceUrl);
        
        // For now, return the HTML as a data URL that can be printed to PDF
        const htmlDataUrl = `data:text/html;charset=utf-8,${encodeURIComponent(htmlContent)}`;
        
        // In a real implementation, you would:
        // 1. Load jsPDF library
        // 2. Create new jsPDF instance
        // 3. Add content with proper formatting
        // 4. Return PDF bytes
        
        return this.convertToPDFBytes({
            title: this.getPageTitle(sourceUrl),
            source: sourceUrl,
            date: new Date().toLocaleDateString(),
            paragraphs: paragraphs
        });
    }

    generateHTML(paragraphs, sourceUrl) {
        const title = this.getPageTitle(sourceUrl);
        const date = new Date().toLocaleDateString();
        
        let html = `
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <title>${title}</title>
            <style>
                @page {
                    size: A4;
                    margin: 2cm;
                }
                body {
                    font-family: 'Times New Roman', serif;
                    font-size: 12pt;
                    line-height: 1.6;
                    color: #333;
                    max-width: 100%;
                }
                .header {
                    text-align: center;
                    border-bottom: 2px solid #333;
                    padding-bottom: 20px;
                    margin-bottom: 30px;
                }
                .title {
                    font-size: 18pt;
                    font-weight: bold;
                    margin-bottom: 10px;
                }
                .metadata {
                    font-size: 10pt;
                    color: #666;
                    margin-bottom: 5px;
                }
                .paragraph {
                    margin-bottom: 15px;
                    text-align: justify;
                    text-indent: 20px;
                }
                .paragraph-number {
                    font-weight: bold;
                    color: #666;
                    font-size: 10pt;
                }
                .footer {
                    position: fixed;
                    bottom: 1cm;
                    left: 2cm;
                    right: 2cm;
                    text-align: center;
                    font-size: 8pt;
                    color: #666;
                    border-top: 1px solid #ccc;
                    padding-top: 10px;
                }
            </style>
        </head>
        <body>
            <div class="header">
                <div class="title">${title}</div>
                <div class="metadata">Source: ${sourceUrl}</div>
                <div class="metadata">Extracted on: ${date}</div>
                <div class="metadata">${paragraphs.length} paragraphs</div>
            </div>
        `;
        
        paragraphs.forEach((paragraph, index) => {
            html += `
                <div class="paragraph">
                    <span class="paragraph-number">[${index + 1}]</span>
                    ${paragraph.text}
                </div>
            `;
        });
        
        html += `
            <div class="footer">
                Generated by Web Page Tools Extension | ${paragraphs.length} paragraphs from ${sourceUrl}
            </div>
        </body>
        </html>
        `;
        
        return html;
    }
}

// Export for use in background script
if (typeof module !== 'undefined' && module.exports) {
    module.exports = PdfGenerator;
}
